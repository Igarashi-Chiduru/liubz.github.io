"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5589],{753:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-452752f8",path:"/web/JavaScript.html",title:"JavaScript",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"作真实 DOM Virtual DOM",slug:"作真实-dom-virtual-dom",children:[{level:3,title:"1. 原生 DOM 操作 vs. 通过框架封装操作。",slug:"_1-原生-dom-操作-vs-通过框架封装操作。",children:[]},{level:3,title:"2. 对 React 的 Virtual DOM 的误解。",slug:"_2-对-react-的-virtual-dom-的误解。",children:[]},{level:3,title:"3. MVVM vs. Virtual DOM",slug:"_3-mvvm-vs-virtual-dom",children:[]}]},{level:2,title:"堆（heap）与栈（stack）",slug:"堆-heap-与栈-stack",children:[{level:3,title:"heap",slug:"heap",children:[]},{level:3,title:"stack",slug:"stack",children:[]}]},{level:2,title:"EventLoop",slug:"eventloop",children:[{level:3,title:"1. 基础知识",slug:"_1-基础知识",children:[]},{level:3,title:"2.js 中的异步操作",slug:"_2-js-中的异步操作",children:[]},{level:3,title:"3.同步任务 or 异步任务",slug:"_3-同步任务-or-异步任务",children:[]},{level:3,title:"4.宏任务 or 微任务",slug:"_4-宏任务-or-微任务",children:[]},{level:3,title:"5. Event Loop 事件循环",slug:"_5-event-loop-事件循环",children:[]},{level:3,title:"相关文章",slug:"相关文章",children:[]}]},{level:2,title:"预编译",slug:"预编译",children:[]},{level:2,title:"作用域链",slug:"作用域链",children:[]},{level:2,title:"闭包",slug:"闭包",children:[]}],filePathRelative:"web/JavaScript.md",git:{updatedTime:1636880153e3,contributors:[{name:"lbz",email:"905808069@qq.com",commits:1}]}}},3744:(s,n)=>{n.Z=(s,n)=>{for(const[a,l]of n)s[a]=l;return s}},1318:(s,n,a)=>{a.r(n),a.d(n,{default:()=>u});var l=a(6252);const e=(0,l.uE)('<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h2 id="作真实-dom-virtual-dom" tabindex="-1"><a class="header-anchor" href="#作真实-dom-virtual-dom" aria-hidden="true">#</a> 作真实 DOM Virtual DOM</h2><h3 id="_1-原生-dom-操作-vs-通过框架封装操作。" tabindex="-1"><a class="header-anchor" href="#_1-原生-dom-操作-vs-通过框架封装操作。" aria-hidden="true">#</a> 1. 原生 DOM 操作 vs. 通过框架封装操作。</h3><p>这是一个性能 vs. 可维护性的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。</p><h3 id="_2-对-react-的-virtual-dom-的误解。" tabindex="-1"><a class="header-anchor" href="#_2-对-react-的-virtual-dom-的误解。" aria-hidden="true">#</a> 2. 对 React 的 Virtual DOM 的误解。</h3><p>React 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 innerHTML 其实是一个还算合理的操作... 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 innerHTML，这时候显然就有大量的浪费。我们可以比较一下 innerHTML vs. Virtual DOM 的重绘性能消耗：innerHTML: render html string O(template size) + 重新创建所有 DOM 元素 O(DOM size)Virtual DOM: render Virtual DOM + diff O(template size) + 必要的 DOM 更新 O(DOM change)</p><p>Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是！它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。可以看到，innerHTML 的总计算量不管是 js 计算还是 DOM 操作都是和整个界面的大小相关，但 Virtual DOM 的计算量里面，只有 js 计算和界面大小相关，DOM 操作是和数据的变动量相关的。前面说了，和 DOM 操作比起来，js 计算是极其便宜的。这才是为什么要有 Virtual DOM：它保证了 1）不管你的数据变化多少，每次重绘的性能都可以接受；2) 你依然可以用类似 innerHTML 的思路去写你的应用</p><h3 id="_3-mvvm-vs-virtual-dom" tabindex="-1"><a class="header-anchor" href="#_3-mvvm-vs-virtual-dom" aria-hidden="true">#</a> 3. MVVM vs. Virtual DOM</h3><p>相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的 O(watcher count) 的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是 O(change)：</p><p>脏检查：scope digest O(watcher count) + 必要 DOM 更新 O(DOM change) 依赖收集：重新收集依赖 O(data change) + 必要 DOM 更新 O(DOM change)</p><p>可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。</p><p>MVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 &quot;scope&quot; 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 Virtual DOM 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。</p><p>Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快: dbmon (注意 Angular 默认版本无优化，优化过的在下面）</p><p>顺道说一句，React 渲染列表的时候也需要提供 key 这个特殊 prop，本质上和 track-by 是一回事。</p><p>作者：尤雨溪 链接：https://www.zhihu.com/question/31809713/answer/53544875 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="堆-heap-与栈-stack" tabindex="-1"><a class="header-anchor" href="#堆-heap-与栈-stack" aria-hidden="true">#</a> 堆（heap）与栈（stack）</h2><h3 id="heap" tabindex="-1"><a class="header-anchor" href="#heap" aria-hidden="true">#</a> heap</h3><p>heap 是没有结构的，数据可以任意存放。heap 用于复杂数据类型（引用类型）分配空间，例如数组对象、object 对象。</p><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h3><p>stack 是有结构的，每个区块按照一定次序存放（后进先出），stack 中主要存放一些基本类型的变量和对象的引用，存在栈中的数据大小与生存期必须是确定的。可以明确知道每个区块的大小，因此，stack 的寻址速度要快于 heap。</p><h2 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> EventLoop</h2><h3 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识" aria-hidden="true">#</a> 1. 基础知识</h3><ul><li>js 作为浏览器脚本语言，它的主要用途是与用户互动，以及操作 DOM，因此 js 是单线程，也避免了同时操作同一个 DOM 的矛盾问题；</li><li>为了利用多核 CPU 的计算能力，H5 的 Web Worker 实现的“多线程”实际上指的是“多子线程”，完全受控于主线程，且不允许操作 DOM；</li><li>js 引擎存在 monitoring process 进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去 Event Queue 那里检查是否有等待被调用的函数。这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）</li><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）；</li><li>如果在微任务执行期间微任务队列加入了新的微任务，会将新的微任务加入队列尾部，之后也会被执行；</li></ul><h3 id="_2-js-中的异步操作" tabindex="-1"><a class="header-anchor" href="#_2-js-中的异步操作" aria-hidden="true">#</a> 2.js 中的异步操作</h3><ul><li>setTimeOut</li><li>setInterval</li><li>ajax</li><li>promise</li><li>I/O</li></ul><h3 id="_3-同步任务-or-异步任务" tabindex="-1"><a class="header-anchor" href="#_3-同步任务-or-异步任务" aria-hidden="true">#</a> 3.同步任务 or 异步任务</h3><ul><li>同步任务(synchronous)：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</li><li>异步任务(asynchronous)：不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</li></ul><h3 id="_4-宏任务-or-微任务" tabindex="-1"><a class="header-anchor" href="#_4-宏任务-or-微任务" aria-hidden="true">#</a> 4.宏任务 or 微任务</h3><p>这里需要注意的是 new Promise 是会进入到主线程中立刻执行，而 promise.then 则属于微任务</p><ul><li>宏任务(macro-task)：整体代码 script、setTimeOut、setInterval</li><li>微任务(mincro-task)：promise.then、promise.nextTick(node)</li></ul><h3 id="_5-event-loop-事件循环" tabindex="-1"><a class="header-anchor" href="#_5-event-loop-事件循环" aria-hidden="true">#</a> 5. Event Loop 事件循环</h3><p><img src="/images/img/4820992-82913323252fde95.png" alt="avatar"></p>',32),p=(0,l._)("li",null,"作者：StarryLake",-1),r=(0,l.Uk)("链接："),o={href:"https://www.jianshu.com/p/e06e86ef2595",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Uk)("js 运行机制详解（Event Loop）"),i=(0,l._)("li",null,"来源：简书",-1),t=(0,l.uE)('<h3 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章" aria-hidden="true">#</a> 相关文章</h3><ul><li><p>ssssyoki《这一次，彻底弄懂 JavaScript 执行机制》 https://juejin.im/post/59e85eebf265da430d571f89#heading-9</p></li><li><p>js 运行机制详解（Event Loop） https://www.jianshu.com/p/e06e86ef2595</p></li><li><p>阮一峰《JavaScript 运行机制详解：再谈 Event Loop》 http://www.ruanyifeng.com/blog/2014/10/event-loop.html</p></li></ul><h2 id="预编译" tabindex="-1"><a class="header-anchor" href="#预编译" aria-hidden="true">#</a> 预编译</h2><ol><li>创建AO(Activation Object || 执行期上下文)对象</li><li>找形参和变量声明，将变量声明和形参名作为AO的属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，赋值予函数体</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">123</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">a</span><span style="color:#D4D4D4;"> () {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">() {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">d</span><span style="color:#D4D4D4;"> () {}</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#6A9955;">/*</span></span>\n<span class="line"><span style="color:#6A9955;">预编过程</span></span>\n<span class="line"><span style="color:#6A9955;">1.创建AO对象</span></span>\n<span class="line"><span style="color:#6A9955;">AO{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">}</span></span>\n<span class="line"><span style="color:#6A9955;">2.找形参和变量声明，将变量声明和形参名作为AO的属性名，值为undefined</span></span>\n<span class="line"><span style="color:#6A9955;">AO{</span></span>\n<span class="line"><span style="color:#6A9955;">  a: undefined,</span></span>\n<span class="line"><span style="color:#6A9955;">  b: undefined</span></span>\n<span class="line"><span style="color:#6A9955;">}</span></span>\n<span class="line"><span style="color:#6A9955;">3.将实参值和形参统一</span></span>\n<span class="line"><span style="color:#6A9955;">AO{</span></span>\n<span class="line"><span style="color:#6A9955;">  a: 1,</span></span>\n<span class="line"><span style="color:#6A9955;">  b:function b() {}</span></span>\n<span class="line"><span style="color:#6A9955;">}</span></span>\n<span class="line"><span style="color:#6A9955;">4. 在函数体里面找函数声明，赋值予函数体</span></span>\n<span class="line"><span style="color:#6A9955;">AO{</span></span>\n<span class="line"><span style="color:#6A9955;">  a: function a {},</span></span>\n<span class="line"><span style="color:#6A9955;">  b:function b() {},</span></span>\n<span class="line"><span style="color:#6A9955;">  d: function d {}</span></span>\n<span class="line"><span style="color:#6A9955;">}</span></span>\n<span class="line"><span style="color:#6A9955;">5. 代码执行</span></span>\n<span class="line"><span style="color:#6A9955;">*/</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h2><ol><li>[[scope]]: 每个JavaScript函数都是一个对象，对象中有些属性我们是可以访问的，但有些不可以，这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。[[scope]]指的就是我们所说的作用域，其中储存了运行期上下文的集合。</li><li>作用域链： [[scope]]中所存储的执行期上下文的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。</li><li>变量查找：从作用域链的顶端依次往下查找。</li></ol><p>示例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">a</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">b</span><span style="color:#D4D4D4;">() {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">234</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">b</span><span style="color:#D4D4D4;">();</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">glob</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#DCDCAA;">a</span><span style="color:#D4D4D4;">();</span></span>\n<span class="line"><span style="color:#6A9955;">/*</span></span>\n<span class="line"><span style="color:#6A9955;">a函数 定义 a.[[scope]] --&gt; 0: GO {}</span></span>\n<span class="line"><span style="color:#6A9955;">a函数 运行 a.[[scope]] --&gt; 0: AO {} (a的A0)</span></span>\n<span class="line"><span style="color:#6A9955;">                          1: GO {}</span></span>\n<span class="line"><span style="color:#6A9955;">b函数 定义 b.[[scope]] --&gt; 0: AO {} (a的A0)</span></span>\n<span class="line"><span style="color:#6A9955;">                          1: GO {}</span></span>\n<span class="line"><span style="color:#6A9955;">b函数 运行 b.[[scope]] --&gt; 0: AO {} (b的A0)</span></span>\n<span class="line"><span style="color:#6A9955;">                          1: AO {} (a的A0)</span></span>\n<span class="line"><span style="color:#6A9955;">                          2: GO {}</span></span>\n<span class="line"><span style="color:#6A9955;">*/</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>图解 a 函数被定义时的作用域链</p><p><img src="/images/img/scope-a-defined.png" alt="avatar"></p><p>a 函数执行时的作用域链</p><p><img src="/images/img/scope-a-doing.png" alt="avatar"></p><p>b 函数被定义时的作用域链</p><p><img src="/images/img/scope-b-defined.png" alt="avatar"></p><p>b 函数执行时的作用域链</p><p><img src="/images/img/scope-b-doing.png" alt="avatar"></p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><ol><li>当内部函数被保存到外部时，将会产生闭包。</li><li>缺点：闭包会导致原有作用域链不释放，造成内存泄漏。</li><li>优点： 实现私有变量，可以做缓存，可以模块化开发，避免全局变量的污染</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">a</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">b</span><span style="color:#D4D4D4;"> () {</span></span>\n<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;"> }</span></span>\n<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dome</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">a</span><span style="color:#D4D4D4;">();</span></span>\n<span class="line"><span style="color:#DCDCAA;">dome</span><span style="color:#D4D4D4;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A9955;">/*</span></span>\n<span class="line"><span style="color:#6A9955;">由于a函数执行把b函数保存到了函数的外部，b函数的作用域链中还保存这a函数的执行时生成的作用域链，导致a函数执行完内存没有得到释放。</span></span>\n<span class="line"><span style="color:#6A9955;">*/</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',20),D={},u=(0,a(3744).Z)(D,[["render",function(s,n){const a=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[e,(0,l._)("ul",null,[p,(0,l._)("li",null,[r,(0,l._)("a",o,[c,(0,l.Wm)(a)])]),i]),t],64)}]])}}]);