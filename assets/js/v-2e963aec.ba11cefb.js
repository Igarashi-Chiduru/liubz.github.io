"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7196],{9954:(e,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-2e963aec",path:"/web/css.html",title:"CSS",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"盒模型",slug:"盒模型",children:[{level:3,title:"页面渲染时，dom 元素所采用的 布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：",slug:"页面渲染时-dom-元素所采用的-布局模型。可通过-box-sizing-进行设置。根据计算宽高的区域可分为",children:[]}]},{level:2,title:"伪类和微元素的区别",slug:"伪类和微元素的区别",children:[]},{level:2,title:"float",slug:"float",children:[{level:3,title:"为何要清除浮动",slug:"为何要清除浮动",children:[]}]},{level:2,title:"devicePixelRatio",slug:"devicepixelratio",children:[{level:3,title:"解决高清的适配",slug:"解决高清的适配",children:[]},{level:3,title:"常见高清显示屏中位图被放大的比例",slug:"常见高清显示屏中位图被放大的比例",children:[]},{level:3,title:"区分普通显示屏和高清屏",slug:"区分普通显示屏和高清屏",children:[]},{level:3,title:"移动端如何调用高清背景图",slug:"移动端如何调用高清背景图",children:[]},{level:3,title:"SCSS 解决方案",slug:"scss-解决方案",children:[]}]},{level:2,title:"CSS3",slug:"css3",children:[]},{level:2,title:"动画",slug:"动画",children:[{level:3,title:"transition: 过渡动画",slug:"transition-过渡动画",children:[]}]}],filePathRelative:"web/css.md",git:{updatedTime:1636880153e3,contributors:[{name:"lbz",email:"905808069@qq.com",commits:1}]}}},3744:(e,a)=>{a.Z=(e,a)=>{for(const[s,t]of a)e[s]=t;return e}},1889:(e,a,s)=>{s.r(a),s.d(a,{default:()=>n});const t=(0,s(6252).uE)('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><ul><li><p><a href="#%E7%9B%92%E6%A8%A1%E5%9E%8B">XSS</a></p></li><li><p><a href="#%E4%BC%AA%E7%B1%BB%E5%92%8C%E5%BE%AE%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%BA%E5%88%AB">CSRF</a></p></li><li><p><a href="#float">float</a></p></li><li><p><a href="#devicePixelRatio">devicePixelRatio</a></p></li></ul><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h2><h3 id="页面渲染时-dom-元素所采用的-布局模型。可通过-box-sizing-进行设置。根据计算宽高的区域可分为" tabindex="-1"><a class="header-anchor" href="#页面渲染时-dom-元素所采用的-布局模型。可通过-box-sizing-进行设置。根据计算宽高的区域可分为" aria-hidden="true">#</a> 页面渲染时，dom 元素所采用的 布局模型。可通过 box-sizing 进行设置。根据计算宽高的区域可分为：</h3><ol><li>content-box (W3C 标准盒模型)</li><li>border-box (IE 盒模型)</li><li>padding-box</li><li>margin-box (浏览器未实现)</li></ol><h2 id="伪类和微元素的区别" tabindex="-1"><a class="header-anchor" href="#伪类和微元素的区别" aria-hidden="true">#</a> 伪类和微元素的区别</h2><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><ol><li>伪类 伪类存在的意义是为了通过选择器，格式化 DOM 树以外的信息以及不能被常规 CSS 选择器获取到的信息。(伪类其实是弥补了 CSS 选择器的不足，用来更方便地获取信息。) <img src="/images/img/1575920682-5aa8738170650.png" alt="avatar"></li><li>伪元素 伪元素可以创建一些文档语言无法创建的虚拟元素。比如：文档语言没有一种机制可以描述元素内容的第一个字母或第一行，但伪元素可以做到(::first-letter、::first-line)。同时，伪元素还可以创建源文档不存在的内容，比如使用 ::before 或 ::after。(伪元素本质上是创建了一个虚拟容器(元素)，我们可以在其中添加内容或样式。)</li></ol><table><thead><tr><th>Selector</th><th style="text-align:center;">Meaning</th><th style="text-align:right;">CSS</th></tr></thead><tbody><tr><td>::first-letter</td><td style="text-align:center;">选择指定元素的第一个单词</td><td style="text-align:right;">1</td></tr><tr><td>::first-line</td><td style="text-align:center;">选择指定元素的第一行</td><td style="text-align:right;">1</td></tr><tr><td>::after</td><td style="text-align:center;">在指定元素的内容前面插入内容</td><td style="text-align:right;">2</td></tr><tr><td>::before</td><td style="text-align:center;">在指定元素的内容后面插入内容</td><td style="text-align:right;">2</td></tr><tr><td>::selection</td><td style="text-align:center;">选择指定元素中被用户选中的内容</td><td style="text-align:right;">3</td></tr></tbody></table><h2 id="float" tabindex="-1"><a class="header-anchor" href="#float" aria-hidden="true">#</a> float</h2><h3 id="为何要清除浮动" tabindex="-1"><a class="header-anchor" href="#为何要清除浮动" aria-hidden="true">#</a> 为何要清除浮动</h3><p>浮动的属性虽然方便使用，但是在使用这种属性时，也存在着一种弊端，那就是当子元素设置了 float 属性之后，且父元素的高度和宽度没有进行设置，而是由子元素支撑起来，则会导致父元素的高度塌陷(原本的 height 后来被置为 0)</p><div class="language-css ext-css line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D7BA7D;">.clearfix:after</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">content</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot; &quot;</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">display</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">block</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">clear</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">both</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">height</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="devicepixelratio" tabindex="-1"><a class="header-anchor" href="#devicepixelratio" aria-hidden="true">#</a> devicePixelRatio</h2><h3 id="解决高清的适配" tabindex="-1"><a class="header-anchor" href="#解决高清的适配" aria-hidden="true">#</a> 解决高清的适配</h3><h3 id="常见高清显示屏中位图被放大的比例" tabindex="-1"><a class="header-anchor" href="#常见高清显示屏中位图被放大的比例" aria-hidden="true">#</a> 常见高清显示屏中位图被放大的比例</h3><p>我们可以了解到 retina 显示屏 中图片被放大的倍数高达 2:1，而其实各种高清显示屏放大的倍数是不同的，有 1.3:1、1.5:1、2:1、3:1 ，目前最多的是 2:1，而 HTC Butterfly、Nexus 5、Samsung Galaxy S4、 Sony Xperia Z 这个几个系列的移动设备，图片被放大的倍数高达 3:1</p><h3 id="区分普通显示屏和高清屏" tabindex="-1"><a class="header-anchor" href="#区分普通显示屏和高清屏" aria-hidden="true">#</a> 区分普通显示屏和高清屏</h3><p>通过 devicePixelRatio 的值，就可以区分普通显示屏和高清屏，当 devicePixelRatio 值等于 1 时（也就是最小值），那么它普通显示屏，当 devicePixelRatio 值大于 1(通常是 1.5、2.0)，那么它就是高清显示屏。</p><h3 id="移动端如何调用高清背景图" tabindex="-1"><a class="header-anchor" href="#移动端如何调用高清背景图" aria-hidden="true">#</a> 移动端如何调用高清背景图</h3><p>为了更好的提升用户体验，节省移动端的流量，针对不同的显示屏，我们可以采取不用的方案，保证图片在不同显示屏幕下正常展现，这个方法跟设计原生 APP 中针对不同分辨率采用使用不同图片的原理相似~</p><p>通过判断 devicePixelRatio 的值来加载不同尺寸的图片</p><p>针对普通显示屏(devicePixelRatio = 1.0、1.3)，加载一张 1 倍的图片 针对高清显示屏(devicePixelRatio &gt;= 1.5、2.0、3.0)，加载一张 2 倍大的图片 由于 3.0 的手机目前比较少，3.0 也加载一张 2 倍的图片是可以接受的。那么，通过上面的方案，我们不是需要设计 2 套图片，甚至是 3 套图片呢？</p><p>具体还是要看产品需求的用户群、维护成本、产品急需上线等来设计方案，例如用户群大都是高端手机来的，全部都采用加载一张 2 倍的图片也是可以接受的~</p><h3 id="scss-解决方案" tabindex="-1"><a class="header-anchor" href="#scss-解决方案" aria-hidden="true">#</a> SCSS 解决方案</h3><div class="language-css ext-css line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#C586C0;">@mixin</span><span style="color:#D4D4D4;"> bg-image($url) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">background-image</span><span style="color:#D4D4D4;">: url($url+&quot;</span><span style="color:#C586C0;">@2x</span><span style="color:#D4D4D4;">.png&quot;);</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">@media</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">-webkit-min-device-pixel-ratio</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">), (min-device-pixel-ratio: </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">background-image</span><span style="color:#D4D4D4;">: url($url+&quot;</span><span style="color:#C586C0;">@3x</span><span style="color:#D4D4D4;">.png&quot;);</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="css3" tabindex="-1"><a class="header-anchor" href="#css3" aria-hidden="true">#</a> CSS3</h2><p><img src="/images/img/css3.png" alt="avatar"></p><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><h3 id="transition-过渡动画" tabindex="-1"><a class="header-anchor" href="#transition-过渡动画" aria-hidden="true">#</a> transition: 过渡动画</h3><ul><li><p>transition-property: 属性</p></li><li><p>transition-duration: 间隔</p></li><li><p>transition-timing-function: 曲线</p></li><li><p>transition-delay: 延迟</p><table><thead><tr><th>transition-timing-function</th><th style="text-align:center;">Meaning</th></tr></thead><tbody><tr><td>linear</td><td style="text-align:center;">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td>ease</td><td style="text-align:center;">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td>ease-in</td><td style="text-align:center;">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td>ease-out</td><td style="text-align:center;">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td>ease-in-out</td><td style="text-align:center;">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td style="text-align:center;">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table></li></ul>',31),l={},n=(0,s(3744).Z)(l,[["render",function(e,a){return t}]])}}]);