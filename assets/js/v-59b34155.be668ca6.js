"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5343],{6893:(e,l,i)=>{i.r(l),i.d(l,{data:()=>a});const a={key:"v-59b34155",path:"/web/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96.html",title:"前端优化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"文章出处",slug:"文章出处",children:[]},{level:2,title:"性能分类",slug:"性能分类",children:[]},{level:2,title:"性能感知优化",slug:"性能感知优化",children:[]},{level:2,title:"构建优化",slug:"构建优化",children:[]},{level:2,title:"网络层面",slug:"网络层面",children:[]},{level:2,title:"渲染层面",slug:"渲染层面",children:[]}],filePathRelative:"web/前端优化.md",git:{updatedTime:1636880153e3,contributors:[{name:"lbz",email:"905808069@qq.com",commits:1}]}}},3744:(e,l)=>{l.Z=(e,l)=>{for(const[i,a]of l)e[i]=a;return e}},6017:(e,l,i)=>{i.r(l),i.d(l,{default:()=>s});var a=i(6252);const r=(0,a._)("h1",{id:"前端优化",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#前端优化","aria-hidden":"true"},"#"),(0,a.Uk)(" 前端优化")],-1),t=(0,a._)("h2",{id:"文章出处",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#文章出处","aria-hidden":"true"},"#"),(0,a.Uk)(" 文章出处")],-1),h={href:"https://juejin.cn/post/6844904195707895816#heading-10",target:"_blank",rel:"noopener noreferrer"},n=(0,a.Uk)("前端性能优化总结(掘金)"),d=(0,a.uE)('<h2 id="性能分类" tabindex="-1"><a class="header-anchor" href="#性能分类" aria-hidden="true">#</a> 性能分类</h2><p>对前端工程性能的优化，我觉得可以分为两类：</p><ol><li>站在用户视角的主观的可感知的性能。</li></ol><ul><li>对于用户来说，用户的感知性能才是最重要的，简单讲，就是让用户感觉你的网站访问很快，并且感知性能没有衡量标准。</li><li>不过，凡事总有例外，如果一个页面的加载时间就会很长，我们也可以通过一些方式让用户觉得没有那么慢。</li><li>总之一句话，你的页面可以做的不快，但是你可以让你的用户觉得你很快。</li></ul><ol start="2"><li>站在开发者视角的可客观度量的性</li></ol><ul><li>对于开发者来说，性能指标是可以客观度量的，我们可以通过一些手段来优化 Web 性能，使这些度量指标达到开发者设定的标准。</li><li>客观性能是指，从用户输入url开始，到下载、解析和执行所有资源以及最终绘制的整个过程的时间度量。</li><li>性能指标是个很复杂的标准，后续我会单独整理出一篇文章介绍性能指标。</li></ul><h2 id="性能感知优化" tabindex="-1"><a class="header-anchor" href="#性能感知优化" aria-hidden="true">#</a> 性能感知优化</h2><ol><li>采用骨骼屏 让优化感觉更快了</li></ol><h2 id="构建优化" tabindex="-1"><a class="header-anchor" href="#构建优化" aria-hidden="true">#</a> 构建优化</h2><ol><li>开启gzip压缩</li><li>去掉 console.log</li><li>去除SourceMap</li><li>合理拆包， 或使用CDN减少打包体积</li></ol><h2 id="网络层面" tabindex="-1"><a class="header-anchor" href="#网络层面" aria-hidden="true">#</a> 网络层面</h2><ol><li>HTTP缓存</li><li>混合App原生缓存</li></ol><h2 id="渲染层面" tabindex="-1"><a class="header-anchor" href="#渲染层面" aria-hidden="true">#</a> 渲染层面</h2><ol><li></li></ol>',14),o={},s=(0,i(3744).Z)(o,[["render",function(e,l){const i=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,t,(0,a._)("p",null,[(0,a._)("a",h,[n,(0,a.Wm)(i)])]),d],64)}]])}}]);