"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8832],{9042:(a,s,e)=>{e.r(s),e.d(s,{data:()=>n});const n={key:"v-07c96d40",path:"/web/webpack.html",title:"webpack",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"相关文章",slug:"相关文章",children:[]},{level:2,title:"什么是webpack",slug:"什么是webpack",children:[]},{level:2,title:"entry",slug:"entry",children:[]},{level:2,title:"output",slug:"output",children:[]},{level:2,title:"loader",slug:"loader",children:[]},{level:2,title:"手写一个loader",slug:"手写一个loader",children:[]},{level:2,title:"plugin",slug:"plugin",children:[]},{level:2,title:"手写一个插件",slug:"手写一个插件",children:[]},{level:2,title:"webpack 优化",slug:"webpack-优化",children:[]},{level:2,title:"webpack 打包原理",slug:"webpack-打包原理",children:[]},{level:2,title:"构建原理",slug:"构建原理",children:[]}],filePathRelative:"web/webpack.md",git:{updatedTime:1636880153e3,contributors:[{name:"lbz",email:"905808069@qq.com",commits:1}]}}},3744:(a,s)=>{s.Z=(a,s)=>{for(const[e,n]of s)a[e]=n;return a}},6716:(a,s,e)=>{e.r(s),e.d(s,{default:()=>i});var n=e(6252);const l=(0,n._)("h1",{id:"webpack",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#webpack","aria-hidden":"true"},"#"),(0,n.Uk)(" webpack")],-1),p=(0,n._)("h2",{id:"相关文章",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#相关文章","aria-hidden":"true"},"#"),(0,n.Uk)(" 相关文章")],-1),r={href:"https://segmentfault.com/a/1190000021494964?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"},o=(0,n.Uk)("webpack 打包原理 ? 看完这篇你就懂了 !"),t=(0,n.uE)('<h2 id="什么是webpack" tabindex="-1"><a class="header-anchor" href="#什么是webpack" aria-hidden="true">#</a> 什么是webpack</h2><p>webpack是一个现代的JavaScript应用程序静态模块打包器。当webpack处理应用程序时，他会递归构建一个依赖关系图，其中包含应用程序需要的每个模块</p><h2 id="entry" tabindex="-1"><a class="header-anchor" href="#entry" aria-hidden="true">#</a> entry</h2><p>入口起点(entry point)指示 webpack 应该使用哪个模块,来作为构建其内部依赖图的开始。</p><p>进入入口起点后,webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p>每个依赖项随即被处理,最后输出到称之为 bundles 的文件中。</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h2><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles,以及如何命名这些文件,默认值为 ./dist。基本上,整个应用程序结构,都会被编译到你指定的输出路径的文件夹中。</p><h2 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> loader</h2><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。</p><p>loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块,然后你就可以利用 webpack 的打包能力,对它们进行处理。</p><p>本质上,webpack loader 将所有类型的文件,转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><h2 id="手写一个loader" tabindex="-1"><a class="header-anchor" href="#手写一个loader" aria-hidden="true">#</a> 手写一个loader</h2><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h2><p>loader 被用于转换某些类型的模块,而插件则可以用于执行范围更广的任务。</p><p>插件的范围包括,从打包优化和压缩,一直到重新定义环境中的变量。插件接口功能极其强大,可以用来处理各种各样的任务。</p><h2 id="手写一个插件" tabindex="-1"><a class="header-anchor" href="#手写一个插件" aria-hidden="true">#</a> 手写一个插件</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">//  同步loader</span></span>\n<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">loaderUtils</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;loader-utils&#39;</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#6A9955;">// 利用loader-utils获取loader options里面的配置</span></span>\n<span class="line"><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">exports</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">source</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">options</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">loaderUtils</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getOptions</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">source</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 可以传递更详细的信息</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">callback</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">source</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="webpack-优化" tabindex="-1"><a class="header-anchor" href="#webpack-优化" aria-hidden="true">#</a> webpack 优化</h2><h2 id="webpack-打包原理" tabindex="-1"><a class="header-anchor" href="#webpack-打包原理" aria-hidden="true">#</a> webpack 打包原理</h2><h2 id="构建原理" tabindex="-1"><a class="header-anchor" href="#构建原理" aria-hidden="true">#</a> 构建原理</h2>',21),c={},i=(0,e(3744).Z)(c,[["render",function(a,s){const e=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[l,p,(0,n._)("p",null,[(0,n._)("a",r,[o,(0,n.Wm)(e)])]),t],64)}]])}}]);