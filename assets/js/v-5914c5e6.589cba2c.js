"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2393],{1229:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-5914c5e6",path:"/web/BOM.html",title:"BOM",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"实现跨页面通讯",slug:"实现跨页面通讯",children:[]},{level:2,title:"从输入URL到页面加载发生了什么",slug:"从输入url到页面加载发生了什么",children:[]},{level:2,title:"重绘与回流",slug:"重绘与回流",children:[{level:3,title:"重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 损耗较少",slug:"重绘-repaint-当元素样式的改变不影响布局时-浏览器将使用重绘对元素进行更新-此时由于只需要ui层面的重新像素绘制-因此-损耗较少",children:[]},{level:3,title:"回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:",slug:"回流-reflow-当元素的尺寸、结构或触发某些属性时-浏览器会重新渲染页面-称为回流。此时-浏览器需要重新经过计算-计算后还需要重新页面布局-因此是较重的操作。会触发回流的操作",children:[]}]}],filePathRelative:"web/BOM.md",git:{updatedTime:1636880153e3,contributors:[{name:"lbz",email:"905808069@qq.com",commits:1}]}}},3744:(s,n)=>{n.Z=(s,n)=>{for(const[a,l]of n)s[a]=l;return s}},3990:(s,n,a)=>{a.r(n),a.d(n,{default:()=>d});var l=a(6252);const p=(0,l._)("h1",{id:"bom",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#bom","aria-hidden":"true"},"#"),(0,l.Uk)(" BOM")],-1),e=(0,l._)("li",null,"作者：郭东东",-1),o={href:"https://juejin.im/post/5c64d15d6fb9a049d37f9c20",target:"_blank",rel:"noopener noreferrer"},r=(0,l.Uk)("链接："),t=(0,l._)("li",null,"来源：掘金",-1),c=(0,l.uE)('<h2 id="实现跨页面通讯" tabindex="-1"><a class="header-anchor" href="#实现跨页面通讯" aria-hidden="true">#</a> 实现跨页面通讯</h2><p>CSS 伪类（例如：:hover） 查询某些属性或调用某些方法</p><p>clientWidth、clientHeight、clientTop、clientLeft offsetWidth、offsetHeight、offsetTop、offsetLeft scrollWidth、scrollHeight、scrollTop、scrollLeft getComputedStyle() getBoundingClientRect() scrollTo()</p><ul><li>postMessage <ol><li>postMessage(data,origin)方法接受两个参数</li></ol><ul><li>data:要传递的数据， html5 规范中提到该参数可以是 JavaScript 的任意基本类型或可复制的对象，然而并不是所有浏览器都做到了这点儿，部分浏览器只能处理字符串参数，所以我们在传递参数的时候需要使用 JSON.stringify()方法对对象参数序列化，在低版本 IE 中引用 json2.js 可以实现类似效果。</li></ul><ol start="2"><li>origin：字符串参数，指明目标窗口的源</li></ol><ul><li>协议+主机+端口号[+URL]，URL 会被忽略，所以可以不写，这个参数是为了安全考虑，someWindow.postMessage()方法只会在 someWindow 所在的源(url 的 protocol, host, port)和指定源一致时才会成功触发 message event，当然如果愿意也可以将参数设置为&quot;*&quot;，someWindow 可以在任意源，如果要指定和当前窗口同源的话设置为&quot;/</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"></span>\n<span class="line"><span style="color:#DCDCAA;">postMessage</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">origin</span><span style="color:#D4D4D4;">)</span><span style="color:#9CDCFE;">方法接受两个参数</span></span>\n<span class="line"><span style="color:#9CDCFE;">demo</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">html</span></span>\n<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">iframe</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;iframe&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;http://www.domain2.com/b.html&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;display:none;&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">iframe</span><span style="color:#808080;">&gt;</span></span>\n<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    var iframe = document.getElementById(&#39;iframe&#39;);</span></span>\n<span class="line"><span style="color:#D4D4D4;">    iframe.onload = function() </span><span style="color:#569CD6;">{</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;aym&#39;</span></span>\n<span class="line"><span style="color:#D4D4D4;">        };</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 向domain2传送跨域数据</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">iframe</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">contentWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">postMessage</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">), </span><span style="color:#CE9178;">&#39;http://www.domain2.com&#39;</span><span style="color:#D4D4D4;">);</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">    // 接受domain2返回数据</span></span>\n<span class="line"><span style="color:#D4D4D4;">    window.addEventListener(&#39;message&#39;, function(e) </span><span style="color:#569CD6;">{</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;data from domain2 ---&gt; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">}</span><span style="color:#D4D4D4;">, false);</span></span>\n<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">html</span><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">与a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">html不同源</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>\n<span class="line"><span style="color:#D4D4D4;">    // 接收domain1的数据</span></span>\n<span class="line"><span style="color:#D4D4D4;">    window.addEventListener(&#39;message&#39;, function(e) </span><span style="color:#569CD6;">{</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;data from domain1 ---&gt; &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">);</span></span>\n<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">            data.</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// 处理后再发回domain1</span></span>\n<span class="line"><span style="color:#D4D4D4;">            window.parent.postMessage(JSON.stringify(data), </span><span style="color:#CE9178;">&#39;http://www.domain1.com&#39;</span><span style="color:#9CDCFE;">);</span></span>\n<span class="line"><span style="color:#9CDCFE;">        }</span></span>\n<span class="line"><span style="color:#9CDCFE;">    }, false);</span></span>\n<span class="line"><span style="color:#9CDCFE;">&lt;/script&gt;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="从输入url到页面加载发生了什么" tabindex="-1"><a class="header-anchor" href="#从输入url到页面加载发生了什么" aria-hidden="true">#</a> 从输入URL到页面加载发生了什么</h2>',6),i=(0,l.Uk)("相关文章："),D={href:"https://www.jianshu.com/p/e06e86ef2595",target:"_blank",rel:"noopener noreferrer"},y=(0,l.Uk)(" 前端经典面试题: 从输入URL到页面加载发生了什么"),u=(0,l.uE)('<ol><li><p>DNS解析</p></li><li><p>TCP连接</p></li><li><p>发送HTTP请求</p></li><li><p>服务器处理请求并返回HTTP报文</p></li><li><p>浏览器解析渲染页面</p></li></ol><ul><li>HTML parser --&gt; DOM Tree <ul><li>标记化算法，进行元素状态的标记</li><li>dom 树构建</li></ul></li><li>CSS parser --&gt; Style Tree <ul><li>解析 css 代码，生成样式树</li></ul></li><li>attachment --&gt; Render Tree <ul><li>结合 dom树 与 style树，生成渲染树</li></ul></li><li>layout: 布局</li><li>GPU painting: 像素绘制页面</li></ul><ol start="6"><li>连接结束</li></ol><h2 id="重绘与回流" tabindex="-1"><a class="header-anchor" href="#重绘与回流" aria-hidden="true">#</a> 重绘与回流</h2><p>当元素的样式发生变化时，浏览器需要触发更新，重新绘制元素。这个过程中，有两种类型的操作，即重绘与回流。</p><h3 id="重绘-repaint-当元素样式的改变不影响布局时-浏览器将使用重绘对元素进行更新-此时由于只需要ui层面的重新像素绘制-因此-损耗较少" tabindex="-1"><a class="header-anchor" href="#重绘-repaint-当元素样式的改变不影响布局时-浏览器将使用重绘对元素进行更新-此时由于只需要ui层面的重新像素绘制-因此-损耗较少" aria-hidden="true">#</a> 重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 损耗较少</h3><h3 id="回流-reflow-当元素的尺寸、结构或触发某些属性时-浏览器会重新渲染页面-称为回流。此时-浏览器需要重新经过计算-计算后还需要重新页面布局-因此是较重的操作。会触发回流的操作" tabindex="-1"><a class="header-anchor" href="#回流-reflow-当元素的尺寸、结构或触发某些属性时-浏览器会重新渲染页面-称为回流。此时-浏览器需要重新经过计算-计算后还需要重新页面布局-因此是较重的操作。会触发回流的操作" aria-hidden="true">#</a> 回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:</h3><ul><li>页面初次渲染</li><li>浏览器窗口大小改变</li><li>元素尺寸、位置、内容发生改变</li><li>元素字体大小变化</li><li>添加或者删除可见的 dom 元素</li><li>激活 CSS 伪类（例如：:hover）</li><li>查询某些属性或调用某些方法 <ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li><li>scrollTo()</li></ul></li></ul><p>**回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高</p>',9),C={},d=(0,a(3744).Z)(C,[["render",function(s,n){const a=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[p,(0,l._)("ul",null,[e,(0,l._)("li",null,[(0,l._)("a",o,[r,(0,l.Wm)(a)])]),t]),c,(0,l._)("p",null,[i,(0,l._)("a",D,[y,(0,l.Wm)(a)])]),u],64)}]])}}]);